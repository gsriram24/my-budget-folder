/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicLayoutImport } from './routes/_public-layout'

// Create Virtual Routes

const PublicLayoutIndexLazyImport = createFileRoute('/_public-layout/')()
const PublicLayoutLoginLazyImport = createFileRoute('/_public-layout/login')()

// Create/Update Routes

const PublicLayoutRoute = PublicLayoutImport.update({
  id: '/_public-layout',
  getParentRoute: () => rootRoute,
} as any)

const PublicLayoutIndexLazyRoute = PublicLayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicLayoutRoute,
} as any).lazy(() =>
  import('./routes/_public-layout/index.lazy').then((d) => d.Route),
)

const PublicLayoutLoginLazyRoute = PublicLayoutLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any).lazy(() =>
  import('./routes/_public-layout/login.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public-layout': {
      id: '/_public-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public-layout/login': {
      id: '/_public-layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLayoutLoginLazyImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public-layout/': {
      id: '/_public-layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicLayoutIndexLazyImport
      parentRoute: typeof PublicLayoutImport
    }
  }
}

// Create and export the route tree

interface PublicLayoutRouteChildren {
  PublicLayoutLoginLazyRoute: typeof PublicLayoutLoginLazyRoute
  PublicLayoutIndexLazyRoute: typeof PublicLayoutIndexLazyRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicLayoutLoginLazyRoute: PublicLayoutLoginLazyRoute,
  PublicLayoutIndexLazyRoute: PublicLayoutIndexLazyRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof PublicLayoutRouteWithChildren
  '/login': typeof PublicLayoutLoginLazyRoute
  '/': typeof PublicLayoutIndexLazyRoute
}

export interface FileRoutesByTo {
  '/login': typeof PublicLayoutLoginLazyRoute
  '/': typeof PublicLayoutIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_public-layout': typeof PublicLayoutRouteWithChildren
  '/_public-layout/login': typeof PublicLayoutLoginLazyRoute
  '/_public-layout/': typeof PublicLayoutIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id:
    | '__root__'
    | '/_public-layout'
    | '/_public-layout/login'
    | '/_public-layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_public-layout"
      ]
    },
    "/_public-layout": {
      "filePath": "_public-layout.tsx",
      "children": [
        "/_public-layout/login",
        "/_public-layout/"
      ]
    },
    "/_public-layout/login": {
      "filePath": "_public-layout/login.lazy.tsx",
      "parent": "/_public-layout"
    },
    "/_public-layout/": {
      "filePath": "_public-layout/index.lazy.tsx",
      "parent": "/_public-layout"
    }
  }
}
ROUTE_MANIFEST_END */
